name: Fetch_SET_DEPLOY

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      solution-name: 
        required: true
      branch:
        description: Select branch
        required: true
        default: main

jobs:
  deploy-solution:
    runs-on: windows-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.branch }}

      - name: set branch name in environment variable
        run: |
          $folderPath='.\${{ github.event.inputs.solution-name }}\organizationsettings\dd_branchName'
          $fileName='organizationsetting.xml'
          $childNodeName='value'
          $newValue=$(git branch --show-current)
          
          $xmlFilePath = Get-ChildItem -Path $folderPath -Recurse -Filter $fileName | Select-Object -ExpandProperty FullName -First 1
          [xml]$xml = Get-Content -Path $xmlFilePath
          
          ${{ steps.extract_branch.outputs.branch }}
          
          # Find the node with the specified attribute value
          $node = $xml.SelectSingleNode("//*[@settingdefinitionid.uniquename='dd_branchName']")
          
          # Output the found node
          if ($node) {
              $childNode = $node.SelectSingleNode($childNodeName)
              if ($childNode) {
                  $childNode.InnerText = $newValue
                  Write-Host "Child node '$childNodeName' content set to '$newValue'."
              } else {
                  Write-Host "Child node '$childNodeName' not found."
              }
          } else {
              Write-Host "Node with attribute settingdefinitionid.uniquename='$nodeName' not found."
          }
          $xml.Save($xmlFilePath)
          $xmlContent=Get-Content $xmlFilePath
          $xmlContent
## TODO: solution prefix dynamisch machen
      - name: set commit reference in environment variable
        run: |
          $folderPath='.\${{ github.event.inputs.solution-name }}\organizationsettings\dd_commitReference'
          $fileName='organizationsetting.xml'
          $childNodeName='value'
          $newValue=$(git log -n 1 --pretty=format:"%H" )
          
          $xmlFilePath = Get-ChildItem -Path $folderPath -Recurse -Filter $fileName | Select-Object -ExpandProperty FullName -First 1
          [xml]$xml = Get-Content -Path $xmlFilePath
          
          ${{ steps.extract_branch.outputs.branch }}
          
          # Find the node with the specified attribute value
          $node = $xml.SelectSingleNode("//*[@settingdefinitionid.uniquename='dd_commitReference']")
          
          # Output the found node
          if ($node) {
              $childNode = $node.SelectSingleNode($childNodeName)
              if ($childNode) {
                  $childNode.InnerText = $newValue
                  Write-Host "Child node '$childNodeName' content set to '$newValue'."
              } else {
                  Write-Host "Child node '$childNodeName' not found."
              }
          } else {
              Write-Host "Node with attribute settingdefinitionid.uniquename='$nodeName' not found."
          }
          $xml.Save($xmlFilePath)
          $xmlContent=Get-Content $xmlFilePath
          $xmlContent
          
      # install pac
      - name: install pac
        run: |
          dotnet tool install --global Microsoft.PowerApps.CLI.Tool     
          
      - name: Pack PowerApps Solution
        run: |          
          pac auth create --applicationId ${{ secrets.APP_ID }} --clientSecret '${{ secrets.CLIENT_SECRET }}' -t '${{ secrets.TENANT_ID }}' --environment '${{ secrets.ENV }}'         
          $workingFolder='${{ github.event.inputs.solution-name }}'
          $zipFile = ".\finalSolution.zip"
          pac solution pack --zipfile $zipFile --folder $workingFolder --processCanvasApps
          pac solution import --path $zipFile --force-overwrite          
